# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven


name: CiCD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn package -DskipTests --file pom.xml

    - uses: actions/upload-artifact@v4
      with:
        name: Boardgame
        path: target/*.jar

   # Install Trivy
    - name: Install Trivy
      run: curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.45.0/trivy_0.45.0_Linux-64bit.deb -o trivy.deb && sudo dpkg -i trivy.deb

    # Trivy FS scan with fail condition
    - name: Trivy FS scan
      run: trivy fs . --exit-code 1 --severity CRITICAL

    # Run SonarQube Scan (optional - requires SONAR_TOKEN and SONAR_HOST_URL secrets)
    - name: SonarQube Scan
      continue-on-error: true
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    # Run TruffleHog scan (optional - requires TruffleHog Enterprise)
    - name: TruffleHog scan
      continue-on-error: true
      uses: trufflesecurity/TruffleHog-Enterprise-Github-Action@main
      with:
        args: --fail-verified ${{ github.event.repository.default_branch }} HEAD

    # OWASP Dependency-Check (optional - Trivy provides similar coverage)
    - name: Install OWASP Dependency-Check
      continue-on-error: true
      run: |
        curl -LO https://github.com/jeremylong/DependencyCheck/releases/download/v6.5.3/dependency-check-6.5.3-release.zip
        unzip dependency-check-6.5.3-release.zip -d /usr/local/bin/
        chmod +x /usr/local/bin/dependency-check/bin/dependency-check.sh

    - name: Run OWASP Dependency-Check
      continue-on-error: true
      run: |
        /usr/local/bin/dependency-check/bin/dependency-check.sh --format JSON --out dependency-check-report.json --scan .

    - name: Upload OWASP Dependency-Check Artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-findings
        path: dependency-check-report.json
        if-no-files-found: ignore

    # GitGuardian Secrets Scan (optional - requires GITGUARDIAN_API_KEY secret)
    - name: GitGuardian Secrets Scan
      continue-on-error: true
      uses: GitGuardian/ggshield-action@v1
      with:
        api-key: ${{ secrets.GITGUARDIAN_API_KEY }}

  # Docker build, scan, push, and deploy job
  # Disabled for portfolio demo - set if: true when Docker Hub and K8s are configured
  # Requires: DOCKER_USER, DOCKER_CRED, KUBE_CONFIG secrets
  docker_build:
    name: Build and Push Docker Image (Disabled)
    if: false
    runs-on: ubuntu-latest
    needs: build
    steps:
    # Checkout code
    - uses: actions/checkout@v4

    # Set up QEMU
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Cache Docker layers
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}

    # Build Docker Image
    - name: Build Docker Image
      run: |
        docker build -t linksrobot/gh_actions:latest .

    # Run Trivy image scan
    - name: Trivy Image Scan
      run: |
        trivy image --format table -o trivy-image-report.html linksrobot/gh_actions:latest

    # Login to Docker Hub (optional - requires DOCKER_USER and DOCKER_CRED secrets)
    - name: Login to Docker Hub
      continue-on-error: true
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_CRED }}

    # Push Docker image to Docker Hub (optional - requires successful login)
    - name: Push Docker Image
      continue-on-error: true
      run: |
        docker push linksrobot/gh_actions:latest

    # Apply Kubernetes deployment using kubectl (optional - requires KUBE_CONFIG secret)
    - name: Kubectl Action
      continue-on-error: true
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}

    - name: Apply K8s Deployment
      continue-on-error: true
      run: |
        kubectl apply -f deployment-service.yaml -n webapps
        kubectl get svc -n webapps

      
        

    
